README File for the Execution of Matrix Factorization Algorithm on Epinion Dataset.

1. The Matrix Factorization Algorithm is implemented in Java programming language so you need a Java Runtime Environment.
2. Place the trainingdataepinion.txt, validationdataepinion.txt and testingdataepinion.txt files which are provided in the same folder as that of recproject2.jar
3. On command line specify the path of JRE to the folder which contains recproject2.jar.
5. The code is run using the command java -jar recproject2.jar
6. I chose to make it as a Runnable Jar file as I have used JAMA Matrix Jar external library for matrix representation. Hence, I have provided the sourcecode.txt which contains the source code and jama.jar for reference.

Inputs and the format it is taken in:
1. K (Latent Dimension)  Format: command line integer value
2. lambda (Control Parameter) Format: command line integer value
3. maxlters (maximum number of iterations allowed) Format: command line integer value
4. epsilon (Ratio of value change) Format: command line double value
5. N (Number of recommended items) Format: command line integer value


Command to type for Running the Program:
1. java -jar recproject2.jar

Example: (K=6, lambda=10)
1. The trainingdataepinion.txt, validationdataepinion.txt and testingdataepinion.txt files must be in the same folder as that of the recproject2.jar file.
2. Open (command prompt)cmd and set the path in the folder matrixfactmethod to (location where Java is installed)/Java/jdk(version)/bin and press Enter.
3. Type java -jar recproject2.jar and press Enter.
4. The program will output k=0, k=500.... till k=139500(starts from zero) which shows that the transpose of 140000 items has been done. It is used as a counter purpose to know when the CSR Transpose is done. It will go till 139500 and when 140000th item is reached it will ask for the K value. This step takes around 3 minutes.
5. The program will ask for K value in which 6 has to be typed in cmd and press Enter.
6. The program will then ask for lambda value in which 10 has to be typed in cmd and press Enter.
7. Next the program will ask for the value of maxlters in which 100 has to be typed in cmd and press enter.
8. Next the program will ask for the value of epsilon in which 0.000001 has to be typed in cmd and press enter.
9. The program will output the value of f(t) at each t=0,t=1,..., till t=100. If the epsilon change ratio is reached it will break out. For k=6 lambda=10.0 maxlters=100 epsilon=1.0E-6 the time taken is around 17 minutes and it breaks at t=13. It is used as a counter purpose to know when the LS_Closed(this step) is done.
10. The MSE and RMSE values will be calculated and the program will ask for the value of N i.e., the number of recommended items in which 30 has to be typed in cmd and press enter.
11. The program will output the HR and ARHR values onto the console which takes around 23 minutes.

Note:
1. You can try different combinations of k, lambda, maxlters, epsilon and N.
2. I have varied only the k and lambda for the results and kept maxlters=100, epsilon=0.000001 and N=30 constant for all results.
3. The validationdataepinion has been used by Vachik to set the parameters which we have not used in our program. We have only used the trainingdataepinion.txt and testingdataepinion.txt for this program and method. We have just included it for reference.
4. If maxlters goes till 100, it may take around 1 hour and 45 minutes.
5. The matrixfactresults folder contains the results for combinations of k=1,lambda=3; k=1,lambda=5; k=3,lambda=3; k=3,lambda=5; k=5,lambda=7 and k=6,lambda=10 and kept maxlters=100, epsilon=0.000001 and N=30 constant for all results.

Meaning of Output and It's Interpretation:
1. The result can change for different values of k and lambda.
2. The maxlters must not be kept too high and the epsilon too low as data overfitting may result.
3. The MSE(Mean Square Error) and RMSE(Root Mean Square Error) if lower, the combination is better.
4. For lower MSE, the Hit Rate(HR) and Average Reciprocal Hit Rate(ARHR) must be higher. e.g., HR for MSE 1.6 must be lower than that for HR of MSE for 1.49.
5. This shows that the algorithm is running correctly.
6. The best combination can be found by trial and error only.
7. When the value of N is increased also the HR and ARHR must increase. This is because the number of recommended items increases and hence the HR must also increase.
8. The Hit Rate gives us an idea of the efficiency of the recommendations by a particular method in which the users who brought the items in the testing dataset match that of the recommended items in the top N recommended items generated by algorithm. High HR shows that our algorithm is effective in recommendations.
9. The ARHR considers the index position at which the hit has happened. Hence, a high ARHR will show that the algorithm is very effective in recommendations.